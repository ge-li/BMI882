fiji$abode <- as.factor(fiji$abode)
fiji.glm <- glm(round(average * tot) ~ marriage + edu + abode + offset(log(tot)),
family = poisson, data = fiji[fiji$tot != 0, ])
rm(list = ls())
knitr::opts_chunk$set(
echo = FALSE,          # don't show code
warning = FALSE,       # don't show warnings
message = FALSE,       # don't show messages (less serious warnings)
cache = FALSE,         # set to TRUE to save results from last compilation
fig.align = "center",   # center figures
out.width = "300px"   # image width
)
library(tidyverse)       # load libraries you always use here
set.seed(65)             # make random results reproducible
# Problem 2
fiji <- read.table("fiji.txt", header = T)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$abode <- as.factor(fiji$abode)
fiji.glm <- glm(round(average * tot) ~ marriage + edu + abode + offset(log(tot)),
family = poisson, data = fiji[fiji$tot != 0, ])
summary(fiji.glm)
ec.raw <- read.table("electro_chem.txt", header = F)
ec.O <- ec.raw[1:5, ]
ec.A <- ec.raw[6:10, ]
ec.K <- ec.raw[11:15, ]
gather(ec.O)
ec.O
reshape2::melt(ec.O)
ec.O <- cbind(1:5, ec.raw[1:5, ])
ec.O
ec.raw <- read.table("electro_chem.txt", header = F)
names(ec.raw) <- 1:5
ec.O <- cbind(1:5, ec.raw[1:5, ])
ec.A <- cbind(1:5, ec.raw[6:10, ])
ec.K <- cbind(1:5, ec.raw[11:15, ])
gather(ec.O)
ec.O <- cbind(c(1:5), ec.raw[1:5, ])
ec.O
ec.raw <- read.table("electro_chem.txt", header = F)
names(ec.raw) <- 1:5
ec.O <- cbind(1:5, ec.raw[1:5, ])
ec.A <- cbind(1:5, ec.raw[6:10, ])
ec.K <- cbind(1:5, ec.raw[11:15, ])
?gather
gather(ec.O, key = "key", value = "value")
gather(ec.O, key = "key", value = "value", 1, 2, 3, 4, 5)
melt(ec.raw[1:5, ])
reshape2::melt(ec.raw[1:5, ])
setNames(reshape::melt(ec.raw[1:5, ]), c('rows', 'vars', 'values'))
row.names(ec.raw)
row.names(ec.raw[1:5, ])
?reshape::melt
reshape2::melt(ec.O)
"V" + 1:5
ec.O <- ec.raw[1:5, ]; names(ec.O) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
ec.O
ec.O <- ec.raw[1:5, ]; names(ec.O) <- c("Mg", "Zn", "Fe", "Pb", "Cu"); row.names(ec.O) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
reshape2::melt
reshape2::melt(ec.O)
reshape2::melt(as.matrix(ec.O))
ec.O <- ec.raw[1:5, ]
reshape2::melt(as.matrix(ec.O))
as.matrix(ec.O)
ec.raw <- read.table("electro_chem.txt", header = F)
names(ec.raw) <- 1:5
ec.O <- reshape2::melt(as.matrix(ec.raw[1:5, ]))
ec.A <- reshape2::melt(as.matrix(ec.raw[1:5, ]))
ec.K <- reshape2::melt(as.matrix(ec.raw[1:5, ]))
ec.O
ec.O <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.O
ec.O$Var1
ec.raw <- read.table("electro_chem.txt", header = F)
names(ec.raw) <- 1:5
ec.O <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.A <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.K <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.)
ec.O
model.matrix(value ~ Var1, data = ec.O)
model.matrix(value ~ Var1 - 1, data = ec.O)
model.matrix(value ~ Var1 - 1, data = ec.O) - model.matrix(value ~ Var2 - 1, data = ec.O)
?lm
lm.O <- lm(ec.O$value ~ X.O)
X.O <- model.matrix(value ~ Var1 - 1, data = ec.O) - model.matrix(value ~ Var2 - 1, data = ec.O)
X.A <- model.matrix(value ~ Var1 - 1, data = ec.A) - model.matrix(value ~ Var2 - 1, data = ec.A)
X.K <- model.matrix(value ~ Var1 - 1, data = ec.K) - model.matrix(value ~ Var2 - 1, data = ec.K)
lm.O <- lm(ec.O$value ~ X.O)
summary(lm.O)
lm.O <- lm(ec.O$value ~ X.O - 1)
summary(lm.O)
X.O
ec.raw <- read.table("electro_chem.txt", header = F)
names(ec.raw) <- 1:5
ec.O <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.A <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
ec.K <- reshape2::melt(as.matrix(ec.raw[1:5, ])) %>% mutate_at(vars(Var1, Var2), as.factor)
X.O <- model.matrix(value ~ Var1 - 1, data = ec.O) - model.matrix(value ~ Var2 - 1, data = ec.O)
X.A <- model.matrix(value ~ Var1 - 1, data = ec.A) - model.matrix(value ~ Var2 - 1, data = ec.A)
X.K <- model.matrix(value ~ Var1 - 1, data = ec.K) - model.matrix(value ~ Var2 - 1, data = ec.K)
lm.O <- lm(ec.O$value ~ X.O - 1)
lm.O
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K"), 5)
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K"), 5)
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K"), 5))
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw
gether(ec.raw)
gather(ec.raw)
gather(ec.raw, key = "key", value = "voltage")
gather(ec.raw, key = "key", value = "voltage", V1:V5)
V1:V5
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c(1:5), 3)
ec.raw
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electro <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
ec.raw
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c(c("Mg", "Zn", "Fe", "Pb", "Cu"), electrolyte, pos)
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec.raw
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec
X <- model.matrix(voltage ~ pos - 1)
X <- model.matrix(voltage ~ pos - 1, ec)
X
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
X
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec
ec$pos
as.factor(ec$pos)
factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
X
ec$pos
ec$pos
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
X
ec
X
cbind(ec, X)
names(X)
X
colnames(X)
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
colnames(X) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
ec <- cbind(ec, X)
ec
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu - 1, ec)
summary(ec.fit)
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1, ec)
summary(ec.fit)
rm(list = ls())
knitr::opts_chunk$set(
echo = FALSE,          # don't show code
warning = FALSE,       # don't show warnings
message = FALSE,       # don't show messages (less serious warnings)
cache = FALSE,         # set to TRUE to save results from last compilation
fig.align = "center",   # center figures
out.width = "300px"   # image width
)
library(tidyverse)       # load libraries you always use here
library(broom)
set.seed(65)             # make random results reproducible
# Problem 2
fiji <- read.table("fiji.txt", header = T)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$abode <- as.factor(fiji$abode)
fiji.glm <- glm(round(average * tot) ~ marriage + edu + abode + offset(log(tot)),
family = poisson, data = fiji[fiji$tot != 0, ])
summary(fiji.glm)
## read the data
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
## transform to long format
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
## get model matrix
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
colnames(X) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
## bind the model matrix to original data
ec <- cbind(ec, X)
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1, ec)
tidy(summary(ec.fit))
## read the data
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
## transform to long format
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
## get model matrix
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
colnames(X) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
## bind the model matrix to original data
ec <- cbind(ec, X)
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1, ec)
summary(ec.fit)
rm(list = ls())
knitr::opts_chunk$set(
echo = FALSE,          # don't show code
warning = FALSE,       # don't show warnings
message = FALSE,       # don't show messages (less serious warnings)
cache = FALSE,         # set to TRUE to save results from last compilation
fig.align = "center",   # center figures
out.width = "300px"   # image width
)
library(tidyverse)       # load libraries you always use here
library(broom)
set.seed(65)             # make random results reproducible
# Problem 2
fiji <- read.table("fiji.txt", header = T)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$abode <- as.factor(fiji$abode)
fiji.glm <- glm(round(average * tot) ~ marriage + edu + abode + offset(log(tot)),
family = poisson, data = fiji[fiji$tot != 0, ])
summary(fiji.glm)
## read the data
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
## transform to long format
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
## get model matrix
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
colnames(X) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
## bind the model matrix to original data
ec <- cbind(ec, X)
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1, ec)
summary(ec.fit)
ec.reduced <- ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu - 1, ec)
anova(ec.reduced, ec.fit)
## read the data
ec.raw <- read.table("electro_chem.txt", header = F)
ec.raw$electrolyte <- c(rep("O", 5), rep("A", 5), rep("K", 5))
ec.raw$pos <- rep(c("Mg", "Zn", "Fe", "Pb", "Cu"), 3)
names(ec.raw) <- c("Mg", "Zn", "Fe", "Pb", "Cu", "electrolyte", "pos")
## transform to long format
ec <- gather(ec.raw, key = "neg", value = "voltage", Mg, Zn, Fe, Pb, Cu)
ec$electrolyte <- factor(ec$electrolyte, levels = c("O", "A", "K"))
ec$pos <- factor(ec$pos, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
ec$neg <- factor(ec$neg, levels = c("Mg", "Zn", "Fe", "Pb", "Cu"))
## get model matrix
X <- model.matrix(voltage ~ pos - 1, ec) - model.matrix(voltage ~ neg - 1, ec)
colnames(X) <- c("Mg", "Zn", "Fe", "Pb", "Cu")
## bind the model matrix to original data
ec <- cbind(ec, X)
## fit the model
ec.fit <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1, ec)
summary(ec.fit)
ec.reduced <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu - 1, ec)
anova(ec.reduced, ec.fit)
ec.full <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1 +
Mg * electrolyte + Zn * electrolyte + Fe * electrolyte + Pb * electrolyte + Cu * electrolyte, ec)
summary(ec.full)
ec.reduced <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu - 1, ec)
anova(ec.reduced, ec.fit)
ec.full <- lm(voltage ~ Mg + Zn + Fe + Pb + Cu + electrolyte - 1 +
Mg * electrolyte + Zn * electrolyte + Fe * electrolyte + Pb * electrolyte + Cu * electrolyte, ec)
anova(ec.reduced, ec.full)
plot(ec.reduced)
plot(ec.reduced)
par(mfrow = c(2, 2))
plot(ec.reduced)
plot(ec.reduced)
par(mfrow = c(2, 2))
plot(ec.reduced, which = 1:4)
plot(ec.reduced, which = 1:6)
plot(ec.reduced, which = 3)
plot(ec.reduced, which = 3)
par(mfrow = c(1, 2))
plot(ec.reduced, which = 2:3)
summary(ec.reduced)
# Problem 2
## read the data
fiji <- read.table("fiji.txt", header = T)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$abode <- as.factor(fiji$abode)
## fit the poisson model
fiji.glm <- glm(round(average * tot) ~ marriage + edu + abode + offset(log(tot)),
family = poisson, data = fiji[fiji$tot != 0, ])
summary(fiji.glm)
plot(fiji.glm)
fiji
predict(fiji.glm, data.frame(tot = 1, marriage = 3, edu = 3, abode = 1))
predict(fiji.glm, data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)))
?predicgt
?ppredict
?predict
predict(fiji.glm, data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
confint(predict(fiji.glm, data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE))
predict(fiji.glm, data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE, interval="prediction")
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
pred
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
pred$fit + pred$se.fit
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c(pred$fit - qnorm(0.975) * pred$se.fit, pred$fit + qnorm(0.975) * pred$se.fit)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.975) * pred$se.fit, up = pred$fit + qnorm(0.975) * pred$se.fit)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c("lr" = pred$fit - qnorm(0.975) * pred$se.fit, "up" = pred$fit + qnorm(0.975) * pred$se.fit)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
list(lr = pred$fit - qnorm(0.975) * pred$se.fit, up = pred$fit + qnorm(0.975) * pred$se.fit)
?c
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.975) * pred$se.fit, up = pred$fit + qnorm(0.975) * pred$se.fit)
## (d)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(6), edu = as.factor(4), abode = as.factor(2)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.95) * pred$se.fit, up = pred$fit + qnorm(0.95) * pred$se.fit)
## (d)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(6), edu = as.factor(4), abode = as.factor(2)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.95) * pred$se.fit, up = pred$fit + qnorm(0.95) * pred$se.fit)
## (c)
pred <- predict(fiji.glm,
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.975) * pred$se.fit, up = pred$fit + qnorm(0.975) * pred$se.fit)
?predict.glm
## (c)
pred <- predict(fiji.glm, type = "response",
data.frame(tot = 1, marriage = as.factor(3), edu = as.factor(3), abode = as.factor(1)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.975) * pred$se.fit, up = pred$fit + qnorm(0.975) * pred$se.fit)
## (d)
pred <- predict(fiji.glm, type = "response",
data.frame(tot = 1, marriage = as.factor(6), edu = as.factor(4), abode = as.factor(2)),
se.fit = TRUE)
c(lr = pred$fit - qnorm(0.95) * pred$se.fit, up = pred$fit + qnorm(0.95) * pred$se.fit)
setwd("~/Github/BMI882/Homework")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Github/BMI882/Homework/HW1")
getwd
getwd()
doxorubicinGenes <-
read.table(file.path("RawData","PottiNatMed",
"GeneListsNov07","Adria(final).txt"),
sep="\t",header=TRUE)
dim(doxorubicinGenes)
doxorubicinGenes[1:3,]
doxorubicinGenes <- as.character(doxorubicinGenes[,"Probe.Set.ID"])
doxorubicinGenes[1:3]
doxorubicin07HighCors <- (doxorubicin07Cors > 0.9999)
doxorubicin07Cors <- cor(doxorubicin07Numbers)
doxorubicin07Numbers <-
read.table(file.path("RawData","PottiNatMed","Adria_ALL.txt"), sep="\t",
skip=2, header=FALSE)
colnames(doxorubicin07Numbers) <- rownames(doxorubicin07Info)
doxorubicinGenes <-
read.table(file.path("RawData","PottiNatMed",
"GeneListsNov07","Adria(final).txt"),
sep="\t",header=TRUE)
dim(doxorubicinGenes)
doxorubicinGenes[1:3,]
doxorubicinGenes <- as.character(doxorubicinGenes[,"Probe.Set.ID"])
doxorubicinGenes[1:3]
### buildDoxo07Info
tempSampleNames <-
c(paste("Training", c(1:22), sep=""),
paste("Test", c(1:122), sep=""))
tempGroup <- c(rep("Training", 22), rep("Test", 122))
tempStatus <- tempDoxorubicin07Header2
doxorubicinGenes <-
read.table(file.path("RawData","PottiNatMed",
"GeneListsNov07","Adria(final).txt"),
sep="\t",header=TRUE)
dim(doxorubicinGenes)
doxorubicinGenes[1:3,]
doxorubicinGenes <- as.character(doxorubicinGenes[,"Probe.Set.ID"])
doxorubicinGenes[1:3]
tempDoxorubicin07Header1 <-
read.table(file.path("RawData","PottiNatMed","Adria_ALL.txt"), sep="\t",
nrows=1, header=FALSE)
tempDoxorubicin07Header1 <- as.vector(t(tempDoxorubicin07Header1));
tempDoxorubicin07Header2 <-
read.table(file.path("RawData","PottiNatMed","Adria_ALL.txt"), sep="\t",
skip=1, nrows=1, header=FALSE)
tempDoxorubicin07Header2 <- as.vector(t(tempDoxorubicin07Header2));
tempDoxorubicin07Header1[1:25]
tempDoxorubicin07Header2[1:25]
table(tempDoxorubicin07Header1)
table(tempDoxorubicin07Header2)
### buildDoxo07Info
tempSampleNames <-
c(paste("Training", c(1:22), sep=""),
paste("Test", c(1:122), sep=""))
tempGroup <- c(rep("Training", 22), rep("Test", 122))
tempStatus <- tempDoxorubicin07Header2
tempStatus[tempStatus == "Sens"] <- "Sensitive"
tempStatus[tempStatus == "NR"]   <- "Resistant"
tempStatus[tempStatus == "Resp"] <- "Sensitive"
doxorubicin07Info <-
data.frame(sampleGroup = tempGroup,
status      = tempStatus,
row.names   = tempSampleNames)
doxorubicin07Info[c(1:2,22:25),]
#rm(doxorubicin07Header1, doxorubicin07Header2, tempGroup, tempStatus)
rm(list=ls(pattern="^temp"))
doxorubicin07Numbers <-
read.table(file.path("RawData","PottiNatMed","Adria_ALL.txt"), sep="\t",
skip=2, header=FALSE)
colnames(doxorubicin07Numbers) <- rownames(doxorubicin07Info)
doxorubicin07Numbers[1:4,c(1:2,22:25)]
doxorubicin07Cors <- cor(doxorubicin07Numbers)
sum(doxorubicin07Cors > 0.9999)
sum(diag(doxorubicin07Cors) > 0.9999)
doxorubicin07HighCors <- (doxorubicin07Cors > 0.9999)
same07Status <- matrix(rep(doxorubicin07Info[,"status"],144),144,144)
same07Status <- (same07Status == t(same07Status))
temp07Ties <- which(doxorubicin07HighCors & same07Status, arr.ind=TRUE)
temp07Ties <- temp07Ties[temp07Ties[,1] != temp07Ties[,2],]
temp07BadTies <- which(doxorubicin07HighCors & (!same07Status), arr.ind=TRUE)
plot(1:144, 1:144, pch=".", cex=3,
xlim=c(0.5,144.5), ylim=c(0.5,144.5),
xaxs="i", yaxs="i",
xlab="Column in Adria_ALL.txt",
ylab="Column in Adria_ALL.txt",
main="Identical Columns in Adria_ALL.txt",
)
points(temp07Ties[,1],temp07Ties[,2],pch=21,bg="white",lwd=1)
points(temp07BadTies[,1],temp07BadTies[,2],pch=24,bg="red",lwd=2)
abline(h=22.5, v=22.5)
abline(v=32, lty="dashed")
